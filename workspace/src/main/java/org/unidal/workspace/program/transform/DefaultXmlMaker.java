/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.workspace.program.transform;

import static org.unidal.workspace.program.Constants.ATTR_ERROR;
import static org.unidal.workspace.program.Constants.ATTR_ID;
import static org.unidal.workspace.program.Constants.ATTR_IGNORED;
import static org.unidal.workspace.program.Constants.ATTR_NAME;
import static org.unidal.workspace.program.Constants.ATTR_ORDER;
import static org.unidal.workspace.program.Constants.ATTR_SKIPPED;
import static org.unidal.workspace.program.Constants.ATTR_TYPE;

import java.util.Map;
import org.xml.sax.Attributes;

import org.unidal.workspace.program.entity.Block;
import org.unidal.workspace.program.entity.Instrument;
import org.unidal.workspace.program.entity.Program;
import org.unidal.workspace.program.entity.Status;

public class DefaultXmlMaker {

   public Block buildBlock(Attributes attributes) {
      String name = attributes.getValue(ATTR_NAME);
      String ignored = attributes.getValue(ATTR_IGNORED);
      String id = attributes.getValue(ATTR_ID);
      Block block = new Block(name);

      if (ignored != null) {
         block.setIgnored(convert(Boolean.class, ignored, null));
      }

      if (id != null) {
         block.setId(id);
      }

      Map<String, String> dynamicAttributes = block.getDynamicAttributes();
      int _length = attributes == null ? 0 : attributes.getLength();

      for (int i = 0; i < _length; i++) {
         String _name = attributes.getQName(i);
         String _value = attributes.getValue(i);

         dynamicAttributes.put(_name, _value);
      }

      dynamicAttributes.remove(ATTR_NAME);
      dynamicAttributes.remove(ATTR_IGNORED);
      dynamicAttributes.remove(ATTR_ID);

      return block;
   }

   public String buildDependOn(Attributes attributes) {
      throw new UnsupportedOperationException();
   }

   public Instrument buildInstrument(Attributes attributes) {
      String type = attributes.getValue(ATTR_TYPE);
      String order = attributes.getValue(ATTR_ORDER);
      Instrument instrument = new Instrument();

      if (type != null) {
         instrument.setType(type);
      }

      if (order != null) {
         instrument.setOrder(order);
      }

      return instrument;
   }

   public Program buildProgram(Attributes attributes) {
      Program program = new Program();

      return program;
   }

   public String buildProperty(Attributes attributes) {
      throw new UnsupportedOperationException();
   }

   public Status buildStatus(Attributes attributes) {
      String ignored = attributes.getValue(ATTR_IGNORED);
      String skipped = attributes.getValue(ATTR_SKIPPED);
      String error = attributes.getValue(ATTR_ERROR);
      Status status = new Status();

      if (ignored != null) {
         status.setIgnored(convert(Boolean.class, ignored, null));
      }

      if (skipped != null) {
         status.setSkipped(convert(Boolean.class, skipped, null));
      }

      if (error != null) {
         status.setError(convert(Boolean.class, error, null));
      }

      return status;
   }

   @SuppressWarnings("unchecked")
   protected <T> T convert(Class<T> type, String value, T defaultValue) {
      if (value == null || value.length() == 0) {
         return defaultValue;
      }

      if (type == Boolean.class || type == Boolean.TYPE) {
         return (T) Boolean.valueOf(value);
      } else if (type == Integer.class || type == Integer.TYPE) {
         return (T) Integer.valueOf(value);
      } else if (type == Long.class || type == Long.TYPE) {
         return (T) Long.valueOf(value);
      } else if (type == Short.class || type == Short.TYPE) {
         return (T) Short.valueOf(value);
      } else if (type == Float.class || type == Float.TYPE) {
         return (T) Float.valueOf(value);
      } else if (type == Double.class || type == Double.TYPE) {
         return (T) Double.valueOf(value);
      } else if (type == Byte.class || type == Byte.TYPE) {
         return (T) Byte.valueOf(value);
      } else if (type == Character.class || type == Character.TYPE) {
         return (T) (Character) value.charAt(0);
      } else {
         return (T) value;
      }
   }
}

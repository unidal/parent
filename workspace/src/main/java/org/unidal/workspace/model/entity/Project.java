/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.workspace.model.entity;

import static org.unidal.workspace.model.Constants.ATTR_NAME;
import static org.unidal.workspace.model.Constants.ENTITY_PROJECT;

import java.util.ArrayList;
import java.util.List;

import org.unidal.workspace.model.BaseEntity;
import org.unidal.workspace.model.IVisitor;

public class Project extends BaseEntity<Project> {
   private String m_name;

   private Boolean m_enabled = true;

   private String m_gitUrl;

   private String m_mvnArgs;

   private String m_text;

   private List<Project> m_dependOn = new ArrayList<Project>();

   private transient int m_order;

   private transient java.io.File m_baseDir;

   private transient boolean m_error;

   public Project() {
   }

   public Project(String name) {
      m_name = name;
   }

   @Override
   public void accept(IVisitor visitor) {
      visitor.visitProject(this);
   }

   public Project addProject(Project project) {
      m_dependOn.add(project);
      return this;
   }

   @Override
   public boolean equals(Object obj) {
      if (obj instanceof Project) {
         Project _o = (Project) obj;

         if (!equals(getName(), _o.getName())) {
            return false;
         }

         return true;
      }

      return false;
   }

   public Project findProject(String name) {
      for (Project project : m_dependOn) {
         if (!equals(project.getName(), name)) {
            continue;
         }

         return project;
      }

      return null;
   }

   public java.io.File getBaseDir() {
      return m_baseDir;
   }

   public List<Project> getDependOn() {
      return m_dependOn;
   }

   public Boolean getEnabled() {
      return m_enabled;
   }

   public boolean getError() {
      return m_error;
   }

   public String getGitUrl() {
      return m_gitUrl;
   }

   public String getMvnArgs() {
      return m_mvnArgs;
   }

   public String getName() {
      return m_name;
   }

   public int getOrder() {
      return m_order;
   }

   public String getText() {
      return m_text;
   }

   @Override
   public int hashCode() {
      int hash = 0;

      hash = hash * 31 + (m_name == null ? 0 : m_name.hashCode());

      return hash;
   }

   public boolean isEnabled() {
      return m_enabled != null && m_enabled.booleanValue();
   }

   public boolean isError() {
      return m_error;
   }

   @Override
   public void mergeAttributes(Project other) {
      assertAttributeEquals(other, ENTITY_PROJECT, ATTR_NAME, m_name, other.getName());

      if (other.getEnabled() != null) {
         m_enabled = other.getEnabled();
      }
   }

   public Project removeProject(String name) {
      int len = m_dependOn.size();

      for (int i = 0; i < len; i++) {
         Project project = m_dependOn.get(i);

         if (!equals(project.getName(), name)) {
            continue;
         }

         return m_dependOn.remove(i);
      }

      return null;
   }

   public Project setBaseDir(java.io.File baseDir) {
      m_baseDir = baseDir;
      return this;
   }

   public Project setEnabled(Boolean enabled) {
      m_enabled = enabled;
      return this;
   }

   public Project setError(boolean error) {
      m_error = error;
      return this;
   }

   public Project setGitUrl(String gitUrl) {
      m_gitUrl = gitUrl;
      return this;
   }

   public Project setMvnArgs(String mvnArgs) {
      m_mvnArgs = mvnArgs;
      return this;
   }

   public Project setName(String name) {
      m_name = name;
      return this;
   }

   public Project setOrder(int order) {
      m_order = order;
      return this;
   }

   public Project setText(String text) {
      m_text = text;
      return this;
   }

}
